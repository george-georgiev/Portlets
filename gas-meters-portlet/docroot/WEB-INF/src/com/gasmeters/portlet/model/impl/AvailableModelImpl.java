/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.gasmeters.portlet.model.impl;

import com.gasmeters.portlet.model.Available;
import com.gasmeters.portlet.model.AvailableModel;
import com.gasmeters.portlet.model.AvailableSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Available service. Represents a row in the &quot;GasMeters_Available&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.gasmeters.portlet.model.AvailableModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link AvailableImpl}.
 * </p>
 *
 * @author George
 * @see AvailableImpl
 * @see com.gasmeters.portlet.model.Available
 * @see com.gasmeters.portlet.model.AvailableModel
 * @generated
 */
@JSON(strict = true)
public class AvailableModelImpl extends BaseModelImpl<Available>
	implements AvailableModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a available model instance should use the {@link com.gasmeters.portlet.model.Available} interface instead.
	 */
	public static final String TABLE_NAME = "GasMeters_Available";
	public static final Object[][] TABLE_COLUMNS = {
			{ "serialNums", Types.BIGINT },
			{ "groupID", Types.INTEGER }
		};
	public static final String TABLE_SQL_CREATE = "create table GasMeters_Available (serialNums LONG not null primary key,groupID INTEGER)";
	public static final String TABLE_SQL_DROP = "drop table GasMeters_Available";
	public static final String ORDER_BY_JPQL = " ORDER BY available.serialNums ASC";
	public static final String ORDER_BY_SQL = " ORDER BY GasMeters_Available.serialNums ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.gasmeters.portlet.model.Available"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.gasmeters.portlet.model.Available"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.gasmeters.portlet.model.Available"),
			true);
	public static long GROUPID_COLUMN_BITMASK = 1L;
	public static long SERIALNUMS_COLUMN_BITMASK = 2L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Available toModel(AvailableSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Available model = new AvailableImpl();

		model.setSerialNums(soapModel.getSerialNums());
		model.setGroupID(soapModel.getGroupID());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Available> toModels(AvailableSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Available> models = new ArrayList<Available>(soapModels.length);

		for (AvailableSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.gasmeters.portlet.model.Available"));

	public AvailableModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _serialNums;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setSerialNums(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _serialNums;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Available.class;
	}

	@Override
	public String getModelClassName() {
		return Available.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("serialNums", getSerialNums());
		attributes.put("groupID", getGroupID());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long serialNums = (Long)attributes.get("serialNums");

		if (serialNums != null) {
			setSerialNums(serialNums);
		}

		Integer groupID = (Integer)attributes.get("groupID");

		if (groupID != null) {
			setGroupID(groupID);
		}
	}

	@JSON
	@Override
	public long getSerialNums() {
		return _serialNums;
	}

	@Override
	public void setSerialNums(long serialNums) {
		_columnBitmask = -1L;

		_serialNums = serialNums;
	}

	@JSON
	@Override
	public int getGroupID() {
		return _groupID;
	}

	@Override
	public void setGroupID(int groupID) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupID) {
			_setOriginalGroupID = true;

			_originalGroupID = _groupID;
		}

		_groupID = groupID;
	}

	public int getOriginalGroupID() {
		return _originalGroupID;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			Available.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Available toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Available)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		AvailableImpl availableImpl = new AvailableImpl();

		availableImpl.setSerialNums(getSerialNums());
		availableImpl.setGroupID(getGroupID());

		availableImpl.resetOriginalValues();

		return availableImpl;
	}

	@Override
	public int compareTo(Available available) {
		int value = 0;

		if (getSerialNums() < available.getSerialNums()) {
			value = -1;
		}
		else if (getSerialNums() > available.getSerialNums()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Available)) {
			return false;
		}

		Available available = (Available)obj;

		long primaryKey = available.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		AvailableModelImpl availableModelImpl = this;

		availableModelImpl._originalGroupID = availableModelImpl._groupID;

		availableModelImpl._setOriginalGroupID = false;

		availableModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Available> toCacheModel() {
		AvailableCacheModel availableCacheModel = new AvailableCacheModel();

		availableCacheModel.serialNums = getSerialNums();

		availableCacheModel.groupID = getGroupID();

		return availableCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(5);

		sb.append("{serialNums=");
		sb.append(getSerialNums());
		sb.append(", groupID=");
		sb.append(getGroupID());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(10);

		sb.append("<model><model-name>");
		sb.append("com.gasmeters.portlet.model.Available");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>serialNums</column-name><column-value><![CDATA[");
		sb.append(getSerialNums());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupID</column-name><column-value><![CDATA[");
		sb.append(getGroupID());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Available.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			Available.class
		};
	private long _serialNums;
	private int _groupID;
	private int _originalGroupID;
	private boolean _setOriginalGroupID;
	private long _columnBitmask;
	private Available _escapedModel;
}