/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.gasmeters.portlet.service.base;

import com.gasmeters.portlet.model.Available;
import com.gasmeters.portlet.service.AvailableService;
import com.gasmeters.portlet.service.persistence.AvailablePersistence;
import com.gasmeters.portlet.service.persistence.InstalledFinder;
import com.gasmeters.portlet.service.persistence.InstalledPersistence;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.bean.IdentifiableBean;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.service.BaseServiceImpl;
import com.liferay.portal.service.persistence.UserPersistence;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the available remote service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link com.gasmeters.portlet.service.impl.AvailableServiceImpl}.
 * </p>
 *
 * @author George
 * @see com.gasmeters.portlet.service.impl.AvailableServiceImpl
 * @see com.gasmeters.portlet.service.AvailableServiceUtil
 * @generated
 */
public abstract class AvailableServiceBaseImpl extends BaseServiceImpl
	implements AvailableService, IdentifiableBean {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link com.gasmeters.portlet.service.AvailableServiceUtil} to access the available remote service.
	 */

	/**
	 * Returns the available local service.
	 *
	 * @return the available local service
	 */
	public com.gasmeters.portlet.service.AvailableLocalService getAvailableLocalService() {
		return availableLocalService;
	}

	/**
	 * Sets the available local service.
	 *
	 * @param availableLocalService the available local service
	 */
	public void setAvailableLocalService(
		com.gasmeters.portlet.service.AvailableLocalService availableLocalService) {
		this.availableLocalService = availableLocalService;
	}

	/**
	 * Returns the available remote service.
	 *
	 * @return the available remote service
	 */
	public com.gasmeters.portlet.service.AvailableService getAvailableService() {
		return availableService;
	}

	/**
	 * Sets the available remote service.
	 *
	 * @param availableService the available remote service
	 */
	public void setAvailableService(
		com.gasmeters.portlet.service.AvailableService availableService) {
		this.availableService = availableService;
	}

	/**
	 * Returns the available persistence.
	 *
	 * @return the available persistence
	 */
	public AvailablePersistence getAvailablePersistence() {
		return availablePersistence;
	}

	/**
	 * Sets the available persistence.
	 *
	 * @param availablePersistence the available persistence
	 */
	public void setAvailablePersistence(
		AvailablePersistence availablePersistence) {
		this.availablePersistence = availablePersistence;
	}

	/**
	 * Returns the installed local service.
	 *
	 * @return the installed local service
	 */
	public com.gasmeters.portlet.service.InstalledLocalService getInstalledLocalService() {
		return installedLocalService;
	}

	/**
	 * Sets the installed local service.
	 *
	 * @param installedLocalService the installed local service
	 */
	public void setInstalledLocalService(
		com.gasmeters.portlet.service.InstalledLocalService installedLocalService) {
		this.installedLocalService = installedLocalService;
	}

	/**
	 * Returns the installed remote service.
	 *
	 * @return the installed remote service
	 */
	public com.gasmeters.portlet.service.InstalledService getInstalledService() {
		return installedService;
	}

	/**
	 * Sets the installed remote service.
	 *
	 * @param installedService the installed remote service
	 */
	public void setInstalledService(
		com.gasmeters.portlet.service.InstalledService installedService) {
		this.installedService = installedService;
	}

	/**
	 * Returns the installed persistence.
	 *
	 * @return the installed persistence
	 */
	public InstalledPersistence getInstalledPersistence() {
		return installedPersistence;
	}

	/**
	 * Sets the installed persistence.
	 *
	 * @param installedPersistence the installed persistence
	 */
	public void setInstalledPersistence(
		InstalledPersistence installedPersistence) {
		this.installedPersistence = installedPersistence;
	}

	/**
	 * Returns the installed finder.
	 *
	 * @return the installed finder
	 */
	public InstalledFinder getInstalledFinder() {
		return installedFinder;
	}

	/**
	 * Sets the installed finder.
	 *
	 * @param installedFinder the installed finder
	 */
	public void setInstalledFinder(InstalledFinder installedFinder) {
		this.installedFinder = installedFinder;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user remote service.
	 *
	 * @return the user remote service
	 */
	public com.liferay.portal.service.UserService getUserService() {
		return userService;
	}

	/**
	 * Sets the user remote service.
	 *
	 * @param userService the user remote service
	 */
	public void setUserService(
		com.liferay.portal.service.UserService userService) {
		this.userService = userService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		Class<?> clazz = getClass();

		_classLoader = clazz.getClassLoader();
	}

	public void destroy() {
	}

	/**
	 * Returns the Spring bean ID for this bean.
	 *
	 * @return the Spring bean ID for this bean
	 */
	@Override
	public String getBeanIdentifier() {
		return _beanIdentifier;
	}

	/**
	 * Sets the Spring bean ID for this bean.
	 *
	 * @param beanIdentifier the Spring bean ID for this bean
	 */
	@Override
	public void setBeanIdentifier(String beanIdentifier) {
		_beanIdentifier = beanIdentifier;
	}

	@Override
	public Object invokeMethod(String name, String[] parameterTypes,
		Object[] arguments) throws Throwable {
		Thread currentThread = Thread.currentThread();

		ClassLoader contextClassLoader = currentThread.getContextClassLoader();

		if (contextClassLoader != _classLoader) {
			currentThread.setContextClassLoader(_classLoader);
		}

		try {
			return _clpInvoker.invokeMethod(name, parameterTypes, arguments);
		}
		finally {
			if (contextClassLoader != _classLoader) {
				currentThread.setContextClassLoader(contextClassLoader);
			}
		}
	}

	protected Class<?> getModelClass() {
		return Available.class;
	}

	protected String getModelClassName() {
		return Available.class.getName();
	}

	/**
	 * Performs an SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) throws SystemException {
		try {
			DataSource dataSource = availablePersistence.getDataSource();

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql, new int[0]);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = com.gasmeters.portlet.service.AvailableLocalService.class)
	protected com.gasmeters.portlet.service.AvailableLocalService availableLocalService;
	@BeanReference(type = com.gasmeters.portlet.service.AvailableService.class)
	protected com.gasmeters.portlet.service.AvailableService availableService;
	@BeanReference(type = AvailablePersistence.class)
	protected AvailablePersistence availablePersistence;
	@BeanReference(type = com.gasmeters.portlet.service.InstalledLocalService.class)
	protected com.gasmeters.portlet.service.InstalledLocalService installedLocalService;
	@BeanReference(type = com.gasmeters.portlet.service.InstalledService.class)
	protected com.gasmeters.portlet.service.InstalledService installedService;
	@BeanReference(type = InstalledPersistence.class)
	protected InstalledPersistence installedPersistence;
	@BeanReference(type = InstalledFinder.class)
	protected InstalledFinder installedFinder;
	@BeanReference(type = com.liferay.counter.service.CounterLocalService.class)
	protected com.liferay.counter.service.CounterLocalService counterLocalService;
	@BeanReference(type = com.liferay.portal.service.ResourceLocalService.class)
	protected com.liferay.portal.service.ResourceLocalService resourceLocalService;
	@BeanReference(type = com.liferay.portal.service.UserLocalService.class)
	protected com.liferay.portal.service.UserLocalService userLocalService;
	@BeanReference(type = com.liferay.portal.service.UserService.class)
	protected com.liferay.portal.service.UserService userService;
	@BeanReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	private String _beanIdentifier;
	private ClassLoader _classLoader;
	private AvailableServiceClpInvoker _clpInvoker = new AvailableServiceClpInvoker();
}